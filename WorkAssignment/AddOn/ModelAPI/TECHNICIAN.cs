// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="Filename.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//     
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace Plugin_WorkAssignment.ModelAPI
{
    [DataContract]
    public partial class TECHNICIAN
    {
        #region Primitive Properties
    
    	/// <summary>
    	/// Retrieve ID Property
    	/// </summary>
        [DataMember]
        public virtual decimal ID
        {
            get;
            set;
        }
    
    	/// <summary>
    	/// Retrieve SHOP_ID Property
    	/// </summary>
        [DataMember]
        public virtual string SHOP_ID
        {
            get;
            set;
        }
    
    	/// <summary>
    	/// Retrieve NAME Property
    	/// </summary>
        [DataMember]
        public virtual string NAME
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public virtual ICollection<TECHNICIAN_ASSIGNMENT> TECHNICIAN_ASSIGNMENT
        {
            get
            {
                if (_tECHNICIAN_ASSIGNMENT == null)
                {
                    var newCollection = new FixupCollection<TECHNICIAN_ASSIGNMENT>();
                    newCollection.CollectionChanged += FixupTECHNICIAN_ASSIGNMENT;
                    _tECHNICIAN_ASSIGNMENT = newCollection;
                }
                return _tECHNICIAN_ASSIGNMENT;
            }
            set
            {
                if (!ReferenceEquals(_tECHNICIAN_ASSIGNMENT, value))
                {
                    var previousValue = _tECHNICIAN_ASSIGNMENT as FixupCollection<TECHNICIAN_ASSIGNMENT>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTECHNICIAN_ASSIGNMENT;
                    }
                    _tECHNICIAN_ASSIGNMENT = value;
                    var newValue = value as FixupCollection<TECHNICIAN_ASSIGNMENT>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTECHNICIAN_ASSIGNMENT;
                    }
                }
            }
        }
        private ICollection<TECHNICIAN_ASSIGNMENT> _tECHNICIAN_ASSIGNMENT;
    
        [DataMember]
        public virtual ICollection<TECHNICIAN_AVAILABILITY> TECHNICIAN_AVAILABILITY
        {
            get
            {
                if (_tECHNICIAN_AVAILABILITY == null)
                {
                    var newCollection = new FixupCollection<TECHNICIAN_AVAILABILITY>();
                    newCollection.CollectionChanged += FixupTECHNICIAN_AVAILABILITY;
                    _tECHNICIAN_AVAILABILITY = newCollection;
                }
                return _tECHNICIAN_AVAILABILITY;
            }
            set
            {
                if (!ReferenceEquals(_tECHNICIAN_AVAILABILITY, value))
                {
                    var previousValue = _tECHNICIAN_AVAILABILITY as FixupCollection<TECHNICIAN_AVAILABILITY>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTECHNICIAN_AVAILABILITY;
                    }
                    _tECHNICIAN_AVAILABILITY = value;
                    var newValue = value as FixupCollection<TECHNICIAN_AVAILABILITY>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTECHNICIAN_AVAILABILITY;
                    }
                }
            }
        }
        private ICollection<TECHNICIAN_AVAILABILITY> _tECHNICIAN_AVAILABILITY;

        #endregion
        #region Association Fixup
    
        private void FixupTECHNICIAN_ASSIGNMENT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TECHNICIAN_ASSIGNMENT item in e.NewItems)
                {
                    item.TECHNICIAN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TECHNICIAN_ASSIGNMENT item in e.OldItems)
                {
                    if (ReferenceEquals(item.TECHNICIAN, this))
                    {
                        item.TECHNICIAN = null;
                    }
                }
            }
        }
    
        private void FixupTECHNICIAN_AVAILABILITY(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TECHNICIAN_AVAILABILITY item in e.NewItems)
                {
                    item.TECHNICIAN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TECHNICIAN_AVAILABILITY item in e.OldItems)
                {
                    if (ReferenceEquals(item.TECHNICIAN, this))
                    {
                        item.TECHNICIAN = null;
                    }
                }
            }
        }

        #endregion
    }
}
