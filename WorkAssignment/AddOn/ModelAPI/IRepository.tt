<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>

<#@ output extension=".cs"#>
<#
// This needs to be set to the .edmx file that you want to process.
string edmxFile = FindEDMXFileName(); // @"Model1.edmx";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
CodeRegion region = new CodeRegion(this, 1);

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);


#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="IRepository.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Represents a repository to data models  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Data.Objects;

namespace <#= code.VsNamespaceSuggestion() #>
{ 
	/// <summary>
	/// Interface representing an object repository
	/// </summary>
	public interface IRepository<T> 
	{
		/// <summary>
		/// Repository Unit Of Work Property
		/// </summary>
		IUnitOfWork UnitOfWork { get; set; }

		/// <summary>
		/// Retrieve all from the repository
		/// </summary>
		/// <returns>>A query</returns>
		IQueryable<T> All();

		/// <summary>
		/// Where clause for a query
		/// </summary>
		/// <param name="expression">Parameters for a where clause</param>
		/// <returns>A query</returns>
		IQueryable<T> Where(Expression<Func<T, bool>> expression);

		/// <summary>
		/// Add object to repository
		/// </summary>
		/// <param name="entity">Object to add to repository</param>
		void Add(T entity);

		/// <summary>
		/// Delete object from repository
		/// </summary>
		/// <param name="entity">Object to delete from repository</param>
		void Delete(T entity);

        /// <summary>
        /// Update repository object
        /// </summary>
        /// <param name="entity">Object to update</param>
        void Update(T entity);
	}
}<#

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{;

	if(!DoesFileExist("I" + entity.Name + "Repository.cs"))
	{
		fileManager.StartNewFile("I" + entity.Name + "Repository.cs");
		#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="I<#=code.Escape(entity)#>Repository.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//     
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
	
namespace <#= code.VsNamespaceSuggestion() #>
{   
	/// <summary>
	/// Interface for <#=code.Escape(entity)#> Repository
	/// </summary>
	<#=Accessibility.ForType(entity)#> interface I<#=code.Escape(entity)#>Repository : IRepository<<#=code.Escape(entity)#>>
	{

	}
}<#
	}
	else
	{
		fileManager.StartNewFile("I" + entity.Name + "Repository.cs");
		this.Write(OutputFile("I" + entity.Name + "Repository.cs"));
	}
}

fileManager.StartNewFile("IUnitOfWork.cs");
#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="IUnitOfWork.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Represents a unit of work (transaction) for data models  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using System;

namespace <#= code.VsNamespaceSuggestion() #>
{
	/// <summary>
	/// Interface representing an unit of work
	/// </summary>
	public interface IUnitOfWork : IDisposable
	{
		/// <summary>
		/// Data Context Property
		/// </summary>
		IObjectContext Context { get; set; }

		/// <summary>
		/// Save unit of work
		/// </summary>
        /// <param name="entity">Entity that needs to be refreshed from data source</param>
		void Commit(object entity = null);

		/// <summary>
		/// Lazy Loading Property
		/// </summary>
		bool LazyLoadingEnabled { get; set; }

		/// <summary>
		/// Proxy Creation Property
		/// </summary>
		bool ProxyCreationEnabled { get; set; }

		/// <summary>
		/// Database Connection String Property
		/// </summary>
		string ConnectionString { get; set; }
	}
}<#
    fileManager.StartNewFile("IObjectContext.cs");
#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="IObjectContext.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Represents a context to the data model
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using System;

namespace <#= code.VsNamespaceSuggestion() #>
{
	/// <summary>
	/// Interface representing an object context
	/// </summary>
	public interface IObjectContext : IDisposable
	{
        /// <summary>
        /// Creates an object set
        /// <summary>
		IObjectSet<T> CreateObjectSet<T>() where T : class;

		/// <summary>
		/// Lazy Loading Property
		/// </summary>		
		bool LazyLoadingEnabled { get; set; }

		/// <summary>
		/// Proxy Creation Property
		/// </summary>
		bool ProxyCreationEnabled { get; set; }
	
		/// <summary>
		/// Database Connection String Property
		/// </summary>	
		string ConnectionString { get; set; }

        /// <summary>
        /// Saves changes to the context
        /// </summary>
        /// <param name="entity">Entity that needs to be refreshed from data source</param>
        void SaveChanges(object entity = null);
	}
}<#	fileManager.Process();
#>


<#+

bool DoesFileExist(string filename)
{			
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));	
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

string FindEDMXFileName()
{
	string edmxFile = "";
				
	string path = Path.Combine(GetCurrentDirectory(), "..\\", "Model");
	string[] entityFrameworkFiles = Directory.GetFiles(path, "*.edmx");
	if(entityFrameworkFiles.Length > 0)
		edmxFile = entityFrameworkFiles[0];
	
	return edmxFile;
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
fileManager.EndBlock();
}
#>