<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>

<#@ output extension=".cs"#>
<#
// This needs to be set to the .edmx file that you want to process.
string edmxFile = FindEDMXFileName(); // @"Model1.edmx";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="EFRepository.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Repository to create, read, update, and delete entities from Oracle via Entity Framework  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Plugin_WorkAssignment.ModelAPI;

namespace <#= code.VsNamespaceSuggestion() #>
{
	/// <summary>
	/// Database implementation of a repository
	/// </summary>
	public class EFRepository<T> : IRepository<T> where T : class
	{
		/// <summary>
		/// Repository Unit Of Work Property
		/// </summary>
		public IUnitOfWork UnitOfWork
        { 
            get
            {
                return this._unitOfWork;
            }

            set
            {
                this._unitOfWork = value;
            
                // Reset object set to retrieve from current context
                this._objectSet = null;
            }
        }

		/// <summary>
		/// Repository Unit Of Work
		/// </summary>
        private IUnitOfWork _unitOfWork = null;

		/// <summary>
		/// Object set of data property
		/// </summary>
        public IObjectSet<T> ObjectSet
        {
            get
            {
                if (this._objectSet == null)
                {
                    this._objectSet = UnitOfWork.Context.CreateObjectSet<T>();
                }
                return this._objectSet;
            }
        }

		/// <summary>
		/// Object set of data
		/// </summary>
        private IObjectSet<T> _objectSet = null;

		/// <summary>
		/// Retrieve all from the repository
		/// </summary>
		/// <returns>>A query</returns>
		public virtual IQueryable<T> All()
		{
			return ObjectSet.AsQueryable();
		}

		/// <summary>
		/// Where clause for a query
		/// </summary>
		/// <param name="expression">Parameters for a where clause</param>
		/// <returns>A query</returns>
		public IQueryable<T> Where(Expression<Func<T, bool>> expression)
		{
			return ObjectSet.Where(expression);
		}

		/// <summary>
		/// Add object to repository
		/// </summary>
		/// <param name="entity">Object to add to repository</param>
		public void Add(T entity)
		{
			ObjectSet.AddObject(entity);
		}

		/// <summary>
		/// Delete object from repository
		/// </summary>
		/// <param name="entity">Object to delete from repository</param>
		public void Delete(T entity)
		{
			ObjectSet.DeleteObject(entity);
		}

        /// <summary>
        /// Updates a respository object
        /// </summary>
        /// <param name="entity"></param>
        public void Update(T entity)
        {
            if (this._objectSet is ObjectSet<T>)
            {
                ObjectSet<T> objectSet = ObjectSet as ObjectSet<T>;
                objectSet.ApplyCurrentValues(entity);
            }
        }
	}
}<#


EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{;

	if(!DoesFileExist(entity.Name + "Repository.cs"))
	{
		fileManager.StartNewFile(entity.Name + "Repository.cs");
		#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="<#=code.Escape(entity)#>Repository.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//     
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Plugin_WorkAssignment.ModelAPI;
using Microsoft.Practices.Unity;
using Logging;
	
namespace <#= code.VsNamespaceSuggestion() #>
{   
	/// <summary>
	/// <#=code.Escape(entity)#> Repository
	/// </summary>
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>Repository : EFRepository<<#=code.Escape(entity)#>>, I<#=code.Escape(entity)#>Repository
	{

	}
}<#
	}
	else
	{
		fileManager.StartNewFile(entity.Name + "Repository.cs");
		this.Write(OutputFile(entity.Name + "Repository.cs"));
	}
}

#><#	fileManager.StartNewFile("RepositoryIQueryableExtensions.cs");
#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="RepositoryIQueryableExtensions.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Extension methods for repository classes  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using System.Linq;
using System;

namespace <#= code.VsNamespaceSuggestion() #>
{
	/// <summary>
	/// Extension methods for repositories
	/// </summary>
	public static class RepositoryIQueryableExtensions
	{
		/// <summary>
		/// Specifies objects to include in query
		/// </summary>
		/// <param name="source">Queryable object to add method to</param>
		/// <param name="path">Path of object to include</param>
		/// <returns>A query</returns>
		public static IQueryable<T> Include<T>
			(this IQueryable<T> source, string path)
		{
			var objectQuery = source as ObjectQuery<T>;
			if (objectQuery != null)
			{
				return objectQuery.Include(path);
			}
			return source;
		}

        /// <summary>
        /// Translates into SQL "LIKE" statement.  Allows code to compile even though method defined in .edmx
        /// </summary>
        /// <param name="searchingIn">Field to perform "LIKE" on</param>
        /// <param name="lookingFor">Search value</param>
        /// <returns>Result from SQL "LIKE"</returns>
        [System.Data.Objects.DataClasses.EdmFunction("Model", "String_Like")]
        public static Boolean String_Like(this String searchingIn, String lookingFor)
        {
            throw new Exception("Not implemented");
        }
	}
}<#fileManager.StartNewFile("DBObjectContext.cs");
#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="DBObjectContext.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Acts as a real object context 
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using Plugin_WorkAssignment.ModelAPI;

namespace <#= code.VsNamespaceSuggestion() #>
{
	/// <summary>
	/// Acts as a real object context 
	/// </summary>
	public class DBObjectContext : IObjectContext
	{
		/// <summary>
		/// Constructor
		/// </summary>
        public DBObjectContext()
        {
            _context = new <#=container.Name#>();

            // WCF does not serialize proxies into JSON well.  Also
            // we can't dispose of context for each of our services if we want
            // WCF to serialize proxies
            _context.ContextOptions.ProxyCreationEnabled = false;
        }

		/// <summary>
		/// Creates a context
		/// </summary>
        public IObjectSet<T> CreateObjectSet<T>() where T : class
        {
            ObjectSet<T> objectSet = _context.CreateObjectSet<T>();
            objectSet.MergeOption = MergeOption.OverwriteChanges;
            return objectSet;
        }

		/// <summary>
		/// Saves changes to context
		/// </summary>
        /// <param name="entity">Entity that needs to be refreshed from data source</param>
        public void SaveChanges(object entity = null)
        {
            _context.SaveChanges();
            if (entity != null)
            {
                _context.Refresh(RefreshMode.StoreWins, entity);
            }
        }

		/// <summary>
		/// Destroys context
		/// </summary>
        public void Dispose()
        {
            _context.Dispose();
        }

		/// <summary>
		/// Lazy Loading Property
		/// </summary>		
		public bool LazyLoadingEnabled
        {
            get { return _context.ContextOptions.LazyLoadingEnabled; }
            set { _context.ContextOptions.LazyLoadingEnabled = value; }
        }

		/// <summary>
		/// Proxy Creation Property
		/// </summary>
		public bool ProxyCreationEnabled
        {
            get { return _context.ContextOptions.ProxyCreationEnabled; }
            set { _context.ContextOptions.ProxyCreationEnabled = value; }
        }
	
		/// <summary>
		/// Database Connection String Property
		/// </summary>	
		public string ConnectionString
        {
            get { return _context.Connection.ConnectionString; }
            set { _context.Connection.ConnectionString = value; }
        }

        #region Private variables
		/// <summary>
		/// Object context for database
		/// </summary>
        private ObjectContext _context  = null;
        #endregion
	}
}<#fileManager.StartNewFile("EFUnitOfWork.cs");
#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="EFUnitOfWork.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Unit of work to save data in Oracle via Entity Framework  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using Plugin_WorkAssignment.ModelAPI;
using Microsoft.Practices.Unity;
using Utilities.ErrorHandling;
using System.Data;
using System;

namespace <#= code.VsNamespaceSuggestion() #>
{
	/// <summary>
	/// Database implementation of an unit of work
	/// </summary>
	public class EFUnitOfWork : IUnitOfWork
	{
		/// <summary>
		/// Data Context Property
		/// </summary>
        [Dependency]
		public IObjectContext Context { get; set; }

		/// <summary>
		/// Save unit of work
		/// </summary>
        /// <param name="entity">Entity that needs to be refreshed from data source</param>
        /// <exception cref="UpdateException">Data concurrency error occurred</exception>
        /// <exception cref="DataBaseException">Database error occurred</exception>
		public void Commit(object entity = null)
		{
            try
            {
			    Context.SaveChanges(entity);
            }
            catch (UpdateException)
            {
                // Do nothing and throw
                throw;
            }
            catch (Exception ex)
            {
                throw new DataBaseException(ex.Message, ex);
            }
		}

		/// <summary>
		/// Lazy Loading Property
		/// </summary>		
		public bool LazyLoadingEnabled
		{
			get { return Context.LazyLoadingEnabled; }
			set { Context.LazyLoadingEnabled = value;}
		}

		/// <summary>
		/// Proxy Creation Property
		/// </summary>
		public bool ProxyCreationEnabled
		{
			get { return Context.ProxyCreationEnabled; }
			set { Context.ProxyCreationEnabled = value; }
		}
	
		/// <summary>
		/// Database Connection String Property
		/// </summary>	
		public string ConnectionString
		{
			get { return Context.ConnectionString; }
			set { Context.ConnectionString = value; }
		}

		/// <summary>
		/// Destroys context to database to release resources
		/// </summary>	          
        public void Dispose()
        {
            if (Context != null)
            {
                Context.Dispose();
            }
        }
	}
}<#	fileManager.Process();
#>


<#+

bool DoesFileExist(string filename)
{			
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));	
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

string FindEDMXFileName()
{
	string edmxFile = "";
				
	string[] entityFrameworkFiles = Directory.GetFiles(GetCurrentDirectory(), "*.edmx");
	if(entityFrameworkFiles.Length > 0)
		edmxFile = entityFrameworkFiles[0];
	
	return edmxFile;
}

void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="BaseDataCachingProvider.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author$</author>
// <remarks>
//   $HeadURL$
//   $LastChangedRevision$ 
//   $LastChangedDate$ 
//   $LastChangedBy$ 
// </remarks>  
// <summary>  
//   Cool page with header to demo, svn keyword substitution  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
fileManager.EndBlock();
}
#>