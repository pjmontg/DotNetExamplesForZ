// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="EFUnitOfWork.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author: pmontgomery $</author>
// <remarks>
//   $HeadURL: https://pipesvn.pipelinenetwork.com/svn/STP/Product/branches/Release/81/WebApp/Plugin_WorkAssignment/Model/EFUnitOfWork.cs $
//   $LastChangedRevision: 8536 $ 
//   $LastChangedDate: 2013-09-09 16:21:06 -0700 (Mon, 09 Sep 2013) $ 
//   $LastChangedBy: pmontgomery $ 
// </remarks>  
// <summary>  
//   Unit of work to save data in Oracle via Entity Framework  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using Plugin_WorkAssignment.ModelAPI;
using Microsoft.Practices.Unity;
using Utilities.ErrorHandling;
using System.Data;
using System;

namespace Plugin_WorkAssignment.Model
{
	/// <summary>
	/// Database implementation of an unit of work
	/// </summary>
	public class EFUnitOfWork : IUnitOfWork
	{
		/// <summary>
		/// Data Context Property
		/// </summary>
        [Dependency]
		public IObjectContext Context { get; set; }

		/// <summary>
		/// Save unit of work
		/// </summary>
        /// <param name="entity">Entity that needs to be refreshed from data source</param>
        /// <exception cref="UpdateException">Data concurrency error occurred</exception>
        /// <exception cref="DataBaseException">Database error occurred</exception>
		public void Commit(object entity = null)
		{
            try
            {
			    Context.SaveChanges(entity);
            }
            catch (UpdateException)
            {
                // Do nothing and throw
                throw;
            }
            catch (Exception ex)
            {
                throw new DataBaseException(ex.Message, ex);
            }
		}

		/// <summary>
		/// Lazy Loading Property
		/// </summary>		
		public bool LazyLoadingEnabled
		{
			get { return Context.LazyLoadingEnabled; }
			set { Context.LazyLoadingEnabled = value;}
		}

		/// <summary>
		/// Proxy Creation Property
		/// </summary>
		public bool ProxyCreationEnabled
		{
			get { return Context.ProxyCreationEnabled; }
			set { Context.ProxyCreationEnabled = value; }
		}
	
		/// <summary>
		/// Database Connection String Property
		/// </summary>	
		public string ConnectionString
		{
			get { return Context.ConnectionString; }
			set { Context.ConnectionString = value; }
		}

		/// <summary>
		/// Destroys context to database to release resources
		/// </summary>	          
        public void Dispose()
        {
            if (Context != null)
            {
                Context.Dispose();
            }
        }
	}
}