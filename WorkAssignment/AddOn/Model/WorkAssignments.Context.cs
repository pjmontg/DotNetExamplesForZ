

// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="SyntempoModel.Context.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author: ogarcia $</author>
// <remarks>
//   $HeadURL: https://pipesvn.pipelinenetwork.com/svn/STP/Product/branches/Release/81/WebApp/Plugin_WorkAssignment/Model/WorkAssignments.Context.cs $
//   $LastChangedRevision: 9341 $ 
//   $LastChangedDate: 2013-11-07 14:51:10 -0800 (Thu, 07 Nov 2013) $ 
//   $LastChangedBy: ogarcia $ 
// </remarks>  
// <summary>  
//   Entity Framework context for Oracle database  
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using Plugin_WorkAssignment.ModelAPI;
using System.Configuration;
using System.Reflection;
using System.Web.Configuration;
using ServicesAPI.Configuration;
using Utilities;
using Utilities.Security;
using Unity.Extensions;
using Logging;

namespace Plugin_WorkAssignment.Model
{
    /// <summary>
    /// Context to interface with database
    /// </summary>
    public partial class WorkAssignEntities : ObjectContext
    {
    	/// <summary>
    	/// Connection string to database
    	/// </summary>
        public const string ConnectionString = "name=WorkAssignEntities";
    
    	/// <summary>
    	/// Name of container
    	/// </summary>
        public const string ContainerName = "WorkAssignEntities";
    
        #region Constructors
    	/// <summary>
    	/// Static block that one time (thread safe) adds connection string for this edmx
    	/// </summary>
        static WorkAssignEntities()
        {
            //
            // Initialize values from web.config.
            //
            //ILogger<WorkAssignEntities> _logger = GlobalUnityContainer.Container.Resolve<ILogger<WorkAssignEntities>>();

            //_logger.Debug("SyntempoMembershipProvider::Initialize");

            //if (config == null)
            //    throw new ArgumentNullException("config");

            //if (name == null || name.Length == 0)
            //{
            //    name = "SyntempoMembershipProvider";
            //}

            //// Rerieve appropriate connection information
            //ConnectionConfigurationElement connConfig = SyntempoConfiguration.GetConfig().Connection;
            //string connPassword = String.IsNullOrEmpty(connConfig.Password) ? String.Empty : connConfig.Password;

            ////Decrypting password if it starts password encryption key
            //if (connPassword.StartsWith(SyntempoConstants.PASSWORD_ENCRYPTION_KEY) == true)
            //{
            //    connPassword = Cryptographer.GetInstance().Decrypt(connPassword.Replace(SyntempoConstants.PASSWORD_ENCRYPTION_KEY, ""));
            //}

            //_logger.Debug("Provider data repository username: {0}", connConfig.Username);
            //_logger.Debug("Provider data repository datasource: {0}", connConfig.Datasource);
            //_logger.Debug("Provider data repository database instance name: {0}", connConfig.DataRepositoryName);
            //this.BuildProviderConnectionInfo(connConfig, connPassword);

            //// Add entities edmx connection
            //typeof(ConfigurationElementCollection).GetField("bReadOnly", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(WebConfigurationManager.ConnectionStrings, false);
            //string entityName = "Entities";
            //WebConfigurationManager.ConnectionStrings.Remove(entityName);
            //EntityConnectionStringBuilder entityConn = new EntityConnectionStringBuilder()
            //{
            //    Metadata = "~/bin/SyntempoModel.csdl|~/bin/SyntempoModel.ssdl|~/bin/SyntempoModel.msl",
            //    Provider = this.ProviderType,
            //    ProviderConnectionString = this._providerConnectionString
            //};
            //ConnectionStringSettings entities = new ConnectionStringSettings()
            //{
            //    Name = entityName,
            //    ProviderName = "System.Data.EntityClient",
            //    ConnectionString = entityConn.ConnectionString
            //};

            //WebConfigurationManager.ConnectionStrings.Add(entities);

            //// Add ADO.Net connection
            //WebConfigurationManager.ConnectionStrings.Remove(SyntempoConstants.ADO_CONNECT);
            //ConnectionStringSettings ado = new ConnectionStringSettings()
            //{

            //    Name = SyntempoConstants.ADO_CONNECT,
            //    ConnectionString = this._providerConnectionString,
            //    ProviderName = this.ProviderType
            //};

            //WebConfigurationManager.ConnectionStrings.Add(ado);

            
            // Manipulate connection string to add plugins edmx connection
           /* typeof(ConfigurationElementCollection).GetField("bReadOnly", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(WebConfigurationManager.ConnectionStrings, false);
            ConnectionConfigurationElement connConfig = SyntempoConfiguration.GetConfig().Connection;

            string password = String.IsNullOrEmpty(connConfig.Password) ? String.Empty : connConfig.Password;

            //Decrypting password if it starts password encryption key
            if (password.StartsWith(SyntempoConstants.PASSWORD_ENCRYPTION_KEY) == true)
            {
                password = Cryptographer.GetInstance().Decrypt(password.Replace(SyntempoConstants.PASSWORD_ENCRYPTION_KEY, ""));
            }

            string provider = String.Empty;
            string providerConnectionString = String.Empty;
            switch (connConfig.Type)
            {
                case ConnectionConfigurationElement.ConnectionType.SQLSERVER:
                    provider = "System.Data.SqlClient";
                    providerConnectionString =
                        ConnectionStringBuilder.GetSqlConnection(
                                datasource: connConfig.Datasource,
                                userID: connConfig.Username,
                                password: password);
                    break;
                case ConnectionConfigurationElement.ConnectionType.ORACLE:
                default:
                    provider = "Oracle.DataAccess.Client";
                    providerConnectionString =
                        ConnectionStringBuilder.GetOracleConnection(
                                datasource: connConfig.Datasource,
                                userID: connConfig.Username,
                                password: password);
                    break;
            }*/

            // Add entities edmx connection
            ///WORK ASSIGNMENT
            ///
          /*  string workAssignEntityName = "WorkAssignEntities";
            WebConfigurationManager.ConnectionStrings.Remove(workAssignEntityName);
            EntityConnectionStringBuilder workAssignEntityConn = new EntityConnectionStringBuilder()
            {
                Metadata = "~/bin/WorkAssign/WorkAssignments.csdl|~/bin/WorkAssign/WorkAssignments.ssdl|~/bin/WorkAssign/WorkAssignments.msl",
                Provider = "Oracle.DataAccess.Client",
                ProviderConnectionString = "POOLING=True;MAX POOL SIZE=30;USER ID=stpdev1;STATEMENT CACHE SIZE=50;PASSWORD=stpdev1;DATA SOURCE=STPNET.SOCAL.PIPELINESOFTWARE.COM;MIN POOL SIZE=10;STATEMENT CACHE PURGE=False"};


            ConnectionStringSettings workAssignEntity = new ConnectionStringSettings()
            {
                Name = workAssignEntityName,
                ProviderName = "Oracle.DataAccess.Client",
                ConnectionString = workAssignEntityConn.ConnectionString
            };

            WebConfigurationManager.ConnectionStrings.Add(workAssignEntity);*/


           /* // SQL Server is empty for provider
            string provider = "provider = Oracle.DataAccess.Client";
            string providerName = "System.Data.EntityClient";
            string datasource = "STPNET.SOCAL.PIPELINESOFTWARE.COM";
            string password = "stpdev1";
            string username = "stpdev1";
            ConnectionStringSettings connSettings = new ConnectionStringSettings()
            {
                Name = "WorkAssignEntities",
                ConnectionString = "metadata=~/bin/WorkAssign/WorkAssignments.csdl|~/bin/WorkAssign/WorkAssignments.ssdl|~/bin/WorkAssign/WorkAssignments.msl;" +
                    provider + ";provider connection string=\"DATA SOURCE=" +
                    datasource +
                    ";PASSWORD=" +
                    password +
                    ";USER ID=" +
                    username + "\"",
                ProviderName = providerName
            };
            WebConfigurationManager.ConnectionStrings.Add(connSettings);*/


            
        }

        /// <summary>
    	/// Constructor
    	/// </summary>
        public WorkAssignEntities()
            : base("name=WorkAssignEntities", "WorkAssignEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
    	/// <summary>
    	/// Constructor
    	/// </summary>
        public WorkAssignEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
    	/// <summary>
    	/// Constructor
    	/// </summary>
        public WorkAssignEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion

        #region ObjectSet Properties

        /// <summary>
    	/// Retrieve TECHNICIAN Property
    	/// </summary>
        public ObjectSet<TECHNICIAN> TECHNICIANs
        {
            get { return _tECHNICIANs  ?? (_tECHNICIANs = CreateObjectSet<TECHNICIAN>("TECHNICIANs")); }
        }
        private ObjectSet<TECHNICIAN> _tECHNICIANs;
    
    	/// <summary>
    	/// Retrieve TECHNICIAN_ASSIGNMENT Property
    	/// </summary>
        public ObjectSet<TECHNICIAN_ASSIGNMENT> TECHNICIAN_ASSIGNMENT
        {
            get { return _tECHNICIAN_ASSIGNMENT  ?? (_tECHNICIAN_ASSIGNMENT = CreateObjectSet<TECHNICIAN_ASSIGNMENT>("TECHNICIAN_ASSIGNMENT")); }
        }
        private ObjectSet<TECHNICIAN_ASSIGNMENT> _tECHNICIAN_ASSIGNMENT;
    
    	/// <summary>
    	/// Retrieve TECHNICIAN_AVAILABILITY Property
    	/// </summary>
        public ObjectSet<TECHNICIAN_AVAILABILITY> TECHNICIAN_AVAILABILITY
        {
            get { return _tECHNICIAN_AVAILABILITY  ?? (_tECHNICIAN_AVAILABILITY = CreateObjectSet<TECHNICIAN_AVAILABILITY>("TECHNICIAN_AVAILABILITY")); }
        }
        private ObjectSet<TECHNICIAN_AVAILABILITY> _tECHNICIAN_AVAILABILITY;
    
    	/// <summary>
    	/// Retrieve VW_TECHNICIAN_AVAILABILITY Property
    	/// </summary>
        public ObjectSet<VW_TECHNICIAN_AVAILABILITY> VW_TECHNICIAN_AVAILABILITY
        {
            get { return _vW_TECHNICIAN_AVAILABILITY  ?? (_vW_TECHNICIAN_AVAILABILITY = CreateObjectSet<VW_TECHNICIAN_AVAILABILITY>("VW_TECHNICIAN_AVAILABILITY")); }
        }
        private ObjectSet<VW_TECHNICIAN_AVAILABILITY> _vW_TECHNICIAN_AVAILABILITY;
    
    	/// <summary>
    	/// Retrieve VW_TECHNICIAN_UTILIZATION Property
    	/// </summary>
        public ObjectSet<VW_TECHNICIAN_UTILIZATION> VW_TECHNICIAN_UTILIZATION
        {
            get { return _vW_TECHNICIAN_UTILIZATION  ?? (_vW_TECHNICIAN_UTILIZATION = CreateObjectSet<VW_TECHNICIAN_UTILIZATION>("VW_TECHNICIAN_UTILIZATION")); }
        }
        private ObjectSet<VW_TECHNICIAN_UTILIZATION> _vW_TECHNICIAN_UTILIZATION;
    
    	/// <summary>
    	/// Retrieve ACTIVITY Property
    	/// </summary>
        public ObjectSet<ACTIVITY> ACTIVITies
        {
            get { return _aCTIVITies  ?? (_aCTIVITies = CreateObjectSet<ACTIVITY>("ACTIVITies")); }
        }
        private ObjectSet<ACTIVITY> _aCTIVITies;
    
    	/// <summary>
    	/// Retrieve VW_TECHNICIAN_ASSIGN_AVAIL Property
    	/// </summary>
        public ObjectSet<VW_TECHNICIAN_ASSIGN_AVAIL> VW_TECHNICIAN_ASSIGN_AVAIL
        {
            get { return _vW_TECHNICIAN_ASSIGN_AVAIL  ?? (_vW_TECHNICIAN_ASSIGN_AVAIL = CreateObjectSet<VW_TECHNICIAN_ASSIGN_AVAIL>("VW_TECHNICIAN_ASSIGN_AVAIL")); }
        }
        private ObjectSet<VW_TECHNICIAN_ASSIGN_AVAIL> _vW_TECHNICIAN_ASSIGN_AVAIL;

        #endregion
    }
}
