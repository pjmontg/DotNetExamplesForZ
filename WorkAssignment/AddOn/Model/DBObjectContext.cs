// -------------------------------------------------------------
// <copyright company="Pipeline Group, Inc." file="DBObjectContext.cs">
// COPYRIGHT NOTICE

// SOFTWARE CONTAINING TRADE SECRETS

// Copyright 2012 Pipeline Group, Inc.  (PIPELINE GROUP, INC ). All rights reserved.

// This software and documentation constitute an unpublished work and contain valuable
// trade secrets and proprietary information belonging to the PIPELINE GROUP, INC .
// None of the foregoing material may be copied, duplicated or disclosed without the 
// express written permission of the PIPELINE GROUP, INC .

// PIPELINE GROUP, INC  EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS 
// SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
// FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT 
// OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE.
// NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE SOFTWARE OR 
// DOCUMENTATION. 

// Under no circumstances shall PIPELINE GROUP, INC  be liable for incidental, special, indirect, direct 
// or consequential damages or loss of profits, interruption of business, or related expenses 
// which may arise from use of software or documentation, including but not limited to those 
// resulting from defects in software and/or documentation, or loss or inaccuracy of data 
// of any kind.

// </copyright>
// <author>$Author: pmontgomery $</author>
// <remarks>
//   $HeadURL: https://pipesvn.pipelinenetwork.com/svn/STP/Product/branches/Release/81/WebApp/Plugin_WorkAssignment/Model/DBObjectContext.cs $
//   $LastChangedRevision: 8155 $ 
//   $LastChangedDate: 2013-07-29 13:48:34 -0700 (Mon, 29 Jul 2013) $ 
//   $LastChangedBy: pmontgomery $ 
// </remarks>  
// <summary>  
//   Acts as a real object context 
// </summary> 
// ------------------------------------------------------------- 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data.Objects;
using Plugin_WorkAssignment.ModelAPI;

namespace Plugin_WorkAssignment.Model
{
	/// <summary>
	/// Acts as a real object context 
	/// </summary>
	public class DBObjectContext : IObjectContext
	{
		/// <summary>
		/// Constructor
		/// </summary>
        public DBObjectContext()
        {
            _context = new WorkAssignEntities();

            // WCF does not serialize proxies into JSON well.  Also
            // we can't dispose of context for each of our services if we want
            // WCF to serialize proxies
            _context.ContextOptions.ProxyCreationEnabled = false;
        }

		/// <summary>
		/// Creates a context
		/// </summary>
        public IObjectSet<T> CreateObjectSet<T>() where T : class
        {
            ObjectSet<T> objectSet = _context.CreateObjectSet<T>();
            objectSet.MergeOption = MergeOption.OverwriteChanges;
            return objectSet;
        }

		/// <summary>
		/// Saves changes to context
		/// </summary>
        /// <param name="entity">Entity that needs to be refreshed from data source</param>
        public void SaveChanges(object entity = null)
        {
            _context.SaveChanges();
            if (entity != null)
            {
                _context.Refresh(RefreshMode.StoreWins, entity);
            }
        }

		/// <summary>
		/// Destroys context
		/// </summary>
        public void Dispose()
        {
            _context.Dispose();
        }

		/// <summary>
		/// Lazy Loading Property
		/// </summary>		
		public bool LazyLoadingEnabled
        {
            get { return _context.ContextOptions.LazyLoadingEnabled; }
            set { _context.ContextOptions.LazyLoadingEnabled = value; }
        }

		/// <summary>
		/// Proxy Creation Property
		/// </summary>
		public bool ProxyCreationEnabled
        {
            get { return _context.ContextOptions.ProxyCreationEnabled; }
            set { _context.ContextOptions.ProxyCreationEnabled = value; }
        }
	
		/// <summary>
		/// Database Connection String Property
		/// </summary>	
		public string ConnectionString
        {
            get { return _context.Connection.ConnectionString; }
            set { _context.Connection.ConnectionString = value; }
        }

        #region Private variables
		/// <summary>
		/// Object context for database
		/// </summary>
        private ObjectContext _context  = null;
        #endregion
	}
}